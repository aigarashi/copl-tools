#(;; Nat
					
  ; learn how to do addition
  (Nat "Z plus Z is Z")
  (Nat "Z plus S(S(Z)) is S(S(Z))")
  (Nat "S(S(Z)) plus Z is S(S(Z))")	
  (Nat "S(Z) plus S(S(S(Z))) is S(S(S(S(Z))))")	

  ; learn how to do multiplication
  (Nat "Z mult S(S(Z)) is Z")
  (Nat "S(S(Z)) mult Z is Z")
  (Nat "S(S(Z)) mult S(Z) is S(S(Z)")
  (Nat "S(S(Z)) mult S(S(Z)) is S(S(S(S(Z))")

  ;; NatLt
  (NatLt1 "S(S(Z)) is less than S(S(S(Z)))")
  (NatLt2 "S(S(Z)) is less than S(S(S(Z)))")
  (NatLt3 "S(S(Z)) is less than S(S(S(Z)))")

  (NatLt1 "S(S(Z)) is less than S(S(S(S(S(Z)))))")
  (NatLt2 "S(S(Z)) is less than S(S(S(S(S(Z)))))")
  (NatLt3 "S(S(Z)) is less than S(S(S(S(S(Z)))))")

  ;; NatExp
  ; learn how to evaluate expressions
  (NatExp "Z + S(S(Z)) evalto S(S(Z))")
  (NatExp "S(S(Z)) + Z evalto S(S(Z))")
  (NatExp "S(Z) + S(Z) + S(Z) evalto S(S(S(Z)))")
  (NatExp "S(S(S((Z))) + S(S(Z)) * S(Z) evalto S(S(S(S(S(Z)))))")
  (NatExp "(S(S(Z)) + S(S(Z))) * Z evalto Z")
  (NatExp "Z * (S(S(Z)) + S(S(Z))) evalto Z")

)