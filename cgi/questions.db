#(;; Nat
					
  ; learn how to do addition
  (Nat "Z plus Z is Z")
  (Nat "Z plus S(S(Z)) is S(S(Z))")
  (Nat "S(S(Z)) plus Z is S(S(Z))")	
  (Nat "S(Z) plus S(S(S(Z))) is S(S(S(S(Z))))")	

  ; learn how to do multiplication
  (Nat "Z times S(S(Z)) is Z")
  (Nat "S(S(Z)) times Z is Z")
  (Nat "S(S(Z)) times S(Z) is S(S(Z))")
  (Nat "S(S(Z)) times S(S(Z)) is S(S(S(S(Z))))")

  ;; NatLt
  (NatLt1 "S(S(Z)) is less than S(S(S(Z)))")
  (NatLt2 "S(S(Z)) is less than S(S(S(Z)))")
  (NatLt3 "S(S(Z)) is less than S(S(S(Z)))")

  (NatLt1 "S(S(Z)) is less than S(S(S(S(S(Z)))))")
  (NatLt2 "S(S(Z)) is less than S(S(S(S(S(Z)))))")
  (NatLt3 "S(S(Z)) is less than S(S(S(S(S(Z)))))")

  ;; NatExp
  ; learn how to evaluate expressions
  (NatExp "Z + S(S(Z)) evalto S(S(Z))")
  (NatExp "S(S(Z)) + Z evalto S(S(Z))")
  (NatExp "S(Z) + S(Z) + S(Z) evalto S(S(S(Z)))")
  (NatExp "S(S(S(Z))) + S(S(Z)) * S(Z) evalto S(S(S(S(S(Z)))))")
  (NatExp "(S(S(Z)) + S(S(Z))) * Z evalto Z")
  (NatExp "Z * (S(S(Z)) + S(S(Z))) evalto Z")

  ;; ML1
  (ML1 "3 + 5 evalto 8")
  (ML1 "8 - 2 - 3 evalto 3")
  (ML1 "(4 + 5) * (1 - 10) evalto -81")
  (ML1 "if 4 < 5 then 2 + 3 else 8 * 8 evalto 5")
  (ML1 "3 + if -23 < -2 * 8 then 8 else 2 + 4 evalto 11")
  (ML1 "3 + (if -23 < -2 * 8 then 8 else 2) + 4 evalto 15")

  ;; ML2
  (ML2 "x = 3, y = 2 |- x evalto 3")
  (ML2 "x = true, y = 4 |- if x then y + 1 else y - 1 evalto 5")
  (ML2 "|- let x = 1 + 2 in x * 4 evalto 12")
  (ML2 "|- let x = 3 * 3 in let y = 4 * x in x + y evalto 45")
  (ML2 "x = 3 |- let x = x * 2 in x + x evalto 12")
  (ML2 "|- let x = let y = 3 - 2 in y * y in let y = 4 in x + y evalto 5")
)