(*
  ML1: 整数 (represented by int) + 三則演算 + 真偽値 + If + 比較演算 
  ML2: ML1 + let (環境)
  ML3: ML2 + fun (関数抽象・適用)
  ML4: ML3 + let rec (再帰関数定義)
  RefML4: ML4 + references (参照)
    (unit value がないので := は右辺の値を返す)
*)

[Syntax]

i in int

b in bool

x,y in Var

l in Loc

v in Value ::= i | b | l | Fun(env, x, e) | Rec(env, x, y, e)

env in Env ::= Empty
            |  Bind(env,x,v)

s in Store ::= EmptyS
            |  Block(s, l, v)

e in Exp ::= i
          | b
          | x
          | l
          | BinOp(op, e, e)
          | If(e, e, e)
          | Let(x, e, e)
          | Abs(x, e)
          | App(e, e)
          | LetRec(x, y, e, e)  
          | NewRef(e)           (* ref e *)
          | Deref(e)            (* ! e *)
          | Assign(e,e)         (* e := e *)

op in Prim ::= Plus | Minus | Mult | Lt

[Judgments]

EvalTo(s, env, e; v, s);
AppBOp(op, v, v; v);

[Rules]

E-Int: 	EvalTo(s, env, i, i, s) :- ;
E-Bool: EvalTo(s, env, b, b, s) :- ;
E-IfT: 	EvalTo(s, env, If(e1, e2, e3), v, s2) :- 
		EvalTo(s, env, e1, true, s1), EvalTo(s1, env, e2, v, s2);
E-IfF: 	EvalTo(s, env, If(e1, e2, e3), v, s2) :- 
		EvalTo(s, env, e1, false, s1), EvalTo(s1, env, e3, v, s2);
E-Plus: EvalTo(s, env, BinOp(Plus, e1, e2), i3, s2) :- 
		EvalTo(s, env, e1, i1, s1), EvalTo(s1, env, e2, i2, s2), AppBOp(Plus, i1, i2, i3);
E-Minus: EvalTo(s, env, BinOp(Minus, e1, e2), i3, s2) :- 
		EvalTo(s, env, e1, i1, s1), EvalTo(s1, env, e2, i2, s2), AppBOp(Minus, i1, i2, i3);
E-Mult: EvalTo(s, env, BinOp(Mult, e1, e2), i3, s1) :- 
		EvalTo(s, env, e1, i1, s1), EvalTo(s1, env, e2, i2, s2), AppBOp(Mult, i1, i2, i3);
E-Lt: 	EvalTo(s, env, BinOp(Lt, e1, e2), b3, s2) :-
		EvalTo(s, env, e1, i1, s1), EvalTo(s1, env, e2, i2, s2), AppBOp(Lt, i1, i2, b3);

E-Var:  EvalTo(s, env, x, v, s) :- ` $v = lookup $s $env $x` %$env($x) = $v%;

E-Let:  EvalTo(s, env, Let(x, e1, e2), v, s2) :-
		EvalTo(s, env, e1, v1, s1), EvalTo(s1, Bind(env,x,v1), e2, v, s2);
E-Fun: EvalTo(s, env, Abs(x, e), Fun(env, x, e), s) :- ;
E-App: EvalTo(s, env, App(e1, e2), v, s3) :-
         EvalTo(s, env, e1, Fun(env2, x, e0), s1),
         EvalTo(s1, env, e2, v2, s2),
         EvalTo(s2, Bind(env2, x, v2), e0, v, s3);

E-LetRec: EvalTo(s, env, LetRec(x, y, e1, e2), v, s1) :-
                EvalTo(s, Bind(env,x,Rec(env,x,y,e1)), e2, v, s1);
E-AppRec: EvalTo(s, env,App(e1, e2), v, s3) :-
         EvalTo(s, env, e1, Rec(env2, x, y, e0), s1),
         EvalTo(s1, env, e2, v2, s2),
         EvalTo(s2, Bind(Bind(env2, x, Rec(env2, x, y, e0)), y, v2), e0, v, s3);

E-Loc: EvalTo(s, env, l, l, s) :- ;

E-Ref: EvalTo(s, env, NewRef(e), l, Block(s1, l, v)) :-
         EvalTo(s, env, e, v, s1),
         `newlocp $s1 $l`  `$l = newloc ()` %$l \notin dom($s1)%;

E-Deref: EvalTo(s, env, Deref(e), v, s1) :-
           EvalTo(s, env, e, l, s1),
           `$v = lookup_store $s1 $env $l` %$s1($l) = $v%;
E-Assign: EvalTo(s, env, Assign(e1, e2), v, s1) :-
            EvalTo(s, env, e1, l, s1),
            EvalTo(s1, env, e2, v, s2),
            `$s3 = update_store $s2 $env $l $v (Assign($e1,$e2))`
            %$s3 = $s2[$l = $v]%;

B-Plus: AppBOp(Plus, i1, i2, i3) 	:- `$i3 = $i1 + $i2`;
B-Minus: AppBOp(Minus, i1, i2, i3) 	:- `$i3 = $i1 - $i2`;
B-Mult: AppBOp(Mult, i1, i2, i3) 	:- `$i3 = $i1 * $i2`;
B-Lt: 	AppBOp(Lt, i1, i2, b3) 		:- `$b3 = ($i1 < $i2)`;

[ML]

let rec lookup s env x =
    match env with 
      Empty -> raise (NoApplicableRule (In_EvalTo (s, env, Exp_of_Var x)))
    | Bind(env, x', v') -> if x = x' then v' else lookup s env x

let rec lookup_store s env l =
    match s with 
      EmptyS -> raise (NoApplicableRule (In_EvalTo (s, env, Exp_of_Loc l)))
    | Block(s, l', v') -> if l = l' then v' else lookup_store s env l

let rec update_store s env l v e =    
    match s with 
      EmptyS ->  raise (NoApplicableRule (In_EvalTo (s, env, e)))
    | Block(s, l', v') -> if l = l' then Block(s, l', v)
                          else Block(update_store s env l v e, l', v')

let rec newlocp s l =
    match s with
      EmptyS -> true
    | Block(s, l', _) -> l = l' || newlocp s l

let counter = ref 0

let rec newloc () = 
    let r = Loc ("l" ^ string_of_int !counter) in
    incr counter; r
