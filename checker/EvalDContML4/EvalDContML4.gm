(*
  ML1: À°¿ô (represented by int) + »°Â§±é»» + ¿¿µ¶ÃÍ + If + Èæ³Ó±é»» 
  ML2: ML1 + let (´Ä¶­)
  ML3: ML2 + fun (´Ø¿ôÃê¾Ý¡¦Å¬ÍÑ) + let rec (ºÆµ¢´Ø¿ôÄêµÁ)
  ML4: ML3 + list + match
  ContML4: ML4 + letcc (·ÑÂ³)
  DContML4: M4 + shift/reset (¸ÂÄê·ÑÂ³)
*)

[Syntax]

i in int

b in bool

x,y in Var

v in Value ::= i | b | Fun(env, x, e) | Rec(env, x, y, e) | NilV | ConsV(v,v) | ContF(k)

env in Env ::= Empty
            |  Bind(env,x,v)

e in Exp ::= i
          | b
          | x
          | BinOp(op, e, e)   (* e op e *)
          | If(e, e, e)       (* if e then e else e *)
          | Let(x, e, e)      (* let x = e in e *)
          | Abs(x, e)         (* fun x -> e *)
          | App(e, e)         (* e e *)
          | LetRec(x, y, e, e)  (* let rec x y = e in e *)
	  | Nil
	  | Cons(e,e)
	  | Match(e,e,x,y,e)   (* match e with [] -> e | x::y -> e *)
          | Reset(e)           (* {e} *)
          | Shift(x,e)          (* shift x in e *)

op in Prim ::= Plus | Minus | Mult | Lt

kk in MCont ::= RetKK              (* __ *)
             | DelimitedKK(k,kk)   (* k >>> kk *)

k in Cont ::= RetK                 (* _ *)
           | EvalRK(env,e,op,k)    (* {env |- _ op e} >> k *)
           | AppOpK(v,op,k)        (* {v op _} >> k *)
           | BranchK(env,e,e,k)    (* {env |- if _ then e else e} >> k *)
           | LetBodyK(env,x,e,k)   (* {env |- let x = _ in e} >> k *)
           | EvalArgK(env,e,k)     (* {env |- _ e} >> k *)
           | AppFunK(v,k)          (* {v _} >> k *)
           | EvalConsRK(env,e,k)   (* {env |- _ :: e} >> k *)
           | ConsK(v,k)          (* {v :: _} >> k *)
           | MatchK(env,e,x,y,e,k) (* {env |- match _ with [] -> e | x::y -> e } >> k *)

[Judgments]

EvalTo(env, k, kk, e; v);   (* E |- e >> k >>> kk evalto v *)
                            (* "E |- e evalto v" abbreviates "E |- e >>> _ evalto v" *)
AppK(k, kk,v; v);           (* v >> k >>> kk evalto v *)
AppBOp(op, v, v; v);

[Rules]

E-Int: 	EvalTo(env, k, kk, i, v) :- AppK(k, kk, i, v);
E-Bool: EvalTo(env, k, kk, b, v) :- AppK(k, kk, b, v);
E-If: EvalTo(env, k, kk, If(e1, e2, e3), v) :-
       EvalTo(env, BranchK(env,e2,e3,k), kk, e1, v);
E-BinOp: EvalTo(env, k, kk, BinOp(op, e1, e2), v) :-
	  EvalTo(env, EvalRK(env,e2,op,k), kk, e1, v);
E-Var:  EvalTo(env, k, kk, x, v2) :- 
          `try $v1 = lookup $env $k $x with Exit -> false`
          `$v1 = lookup $env $k $x`
          %$env($x) = $v1%, 
          AppK(k, kk, v1, v2);
E-Let:  EvalTo(env, k, kk, Let(x, e1, e2), v) :-
		EvalTo(env, LetBodyK(env,x,e2,k), kk, e1, v);
E-Fun: EvalTo(env, k, kk, Abs(x, e), v) :- AppK(k, kk, Fun(env, x, e), v);
E-App: EvalTo(env, k, kk, App(e1, e2), v) :-
         EvalTo(env, EvalArgK(env,e2,k), kk, e1, v);
E-LetRec: EvalTo(env, k, kk, LetRec(x,y,e1,e2), v) :-
            EvalTo(Bind(env, x, Rec(env,x,y,e1)), k, kk, e2, v);
E-Nil: EvalTo(env, k, kk, Nil, v) :- AppK(k, kk, NilV, v);
E-Cons: EvalTo(env, k, kk, Cons(e1, e2), v) :-
          EvalTo(env, EvalConsRK(env, e2, k), kk, e1, v);
E-Match: EvalTo(env, k, kk, Match(e1, e2, x, y, e3), v) :-
           EvalTo(env, MatchK(env, e2, x, y, e3, k), kk, e1, v);

E-Reset: EvalTo(env, k, kk, Reset(e), v) :-
            EvalTo(env, RetK, DelimitedKK(k,kk), e, v);
E-Shift: EvalTo(env, k, kk, Shift(x, e), v) :-
            EvalTo(Bind(env,x,ContF(k)), RetK, kk, e, v);
C-RetRet: AppK(RetK, RetKK, v, v) :- ;
C-RetCont: AppK(RetK, DelimitedKK(k,kk), v1, v2) :- AppK(k, kk, v1, v2);

C-EvalR: AppK(EvalRK(env,e,op,k), kk, v1, v2) :- EvalTo(env, AppOpK(v1,op,k), kk, e, v2);
C-Plus: AppK(AppOpK(i1,Plus,k), kk, i2, v) :- AppBOp(Plus, i1, i2, i3), AppK(k, kk, i3, v);
C-Minus: AppK(AppOpK(i1,Minus,k), kk, i2, v) :- AppBOp(Minus, i1, i2, i3), AppK(k, kk, i3, v);
C-Times: AppK(AppOpK(i1,Mult,k), kk, i2, v) :- AppBOp(Mult, i1, i2, i3), AppK(k, kk, i3, v);
C-Lt: AppK(AppOpK(i1,Lt,k), kk, i2, v) :- AppBOp(Lt, i1, i2, b3), AppK(k, kk, b3, v);

C-IfT: AppK(BranchK(env,e1,e2,k), kk, true, v) :- EvalTo(env, k, kk, e1, v);
C-IfF: AppK(BranchK(env,e1,e2,k), kk, false, v) :- EvalTo(env, k, kk, e2, v);

C-LetBody: AppK(LetBodyK(env,x,e,k), kk, v1, v2) :- EvalTo(Bind(env, x, v1), k, kk, e, v2);
C-EvalArg: AppK(EvalArgK(env, e, k), kk, v1, v) :- EvalTo(env, AppFunK(v1, k), kk, e, v);

C-EvalFun: AppK(AppFunK(Fun(env, x, e), k), kk, v1, v2) :- EvalTo(Bind(env,x,v1), k, kk, e, v2);
C-EvalFunR: AppK(AppFunK(Rec(env, x, y, e), k), kk, v1, v2) :- EvalTo(Bind(Bind(env, x, Rec(env,x,y,e)), y, v1), k, kk, e, v2);

C-EvalFunC: AppK(AppFunK(ContF(k1), k2), kk, v1, v2) :- AppK(k1, DelimitedKK(k2, kk), v1, v2);

C-EvalConsR: AppK(EvalConsRK(env, e, k), kk, v1, v2) :- EvalTo(env, ConsK(v1, k), kk, e, v2);
C-Cons: AppK(ConsK(v1, k), kk, v2, v3) :- AppK(k, kk, ConsV(v1, v2), v3);
C-MatchNil: AppK(MatchK(env,e1,x,y,e2,k), kk, NilV, v) :- EvalTo(env, k, kk, e1, v);
C-MatchCons: AppK(MatchK(env,e1,x,y,e2,k), kk, ConsV(v1, v2), v) :- 
               EvalTo(Bind(Bind(env, x, v1), y, v2), k, kk, e2, v);

B-Plus: AppBOp(Plus, i1, i2, i3) 	:- `$i3 = $i1 + $i2`;
B-Minus: AppBOp(Minus, i1, i2, i3) 	:- `$i3 = $i1 - $i2`;
B-Times: AppBOp(Mult, i1, i2, i3) 	:- `$i3 = $i1 * $i2`;
B-Lt: 	AppBOp(Lt, i1, i2, b3) 		:- `$b3 = ($i1 < $i2)`;

[ML]

(* exception Fatal *)

let rec lookup env k x =
    match env with 
      Empty -> raise Exit
    | Bind(env, x', v') -> if x = x' then v' else lookup env k x
