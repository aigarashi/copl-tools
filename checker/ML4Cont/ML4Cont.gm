(*
  ML1: À°¿ô (represented by int) + »°Â§±é»» + ¿¿µ¶ÃÍ + If + Èæ³Ó±é»» 
  ML2: ML1 + let (´Ä¶­)
  ML3: ML2 + fun (´Ø¿ôÃê¾Ý¡¦Å¬ÍÑ)
  ML4: ML3 + let rec (ºÆµ¢´Ø¿ôÄêµÁ)
  ML4Cont: ML4 + call/cc (·ÑÂ³)
*)

[Syntax]

i in int

b in bool

x,y in Var

v in Value ::= i | b | Fun(env, x, e) | Rec(env, x, y, e) | Cont(k)

env in Env ::= Empty
            |  Bind(env,x,v)

e in Exp ::= i
          | b
          | x
          | BinOp(op, e, e)   (* e op e *)
          | If(e, e, e)       (* if e then e else e *)
          | Let(x, e, e)      (* let x = e in e *)
          | Abs(x, e)         (* fun x -> e *)
          | App(e, e)         (* e e *)
          | LetRec(x, y, e, e)  (* let rec x y = e in e *)
          | LetCc(x,e)          (* let cc x in e *)

op in Prim ::= Plus | Minus | Mult | Lt

k in Cont ::= RetK                 (* [] *)
           | EvalRK(env,e,op,k)    (* {env |- [] op e} >> k *)
           | AppOpK(v,op,k)        (* {v op []} >> k *)
           | BranchK(env,e,e,k)    (* {env |- if [] then e else e} >> k *)
           | LetBodyK(env,x,e,k)   (* {env |- let x = [] in e} >> k *)
           | EvalArgK(env,e,k)     (* {env |- [] e} >> k *)
           | AppFunK(v,k)          (* {v []} >> k *)

[Judgments]

EvalTo(env, k, e; v);   (* E |- e >> k evalto v *)
                        (* "E |- e evalto v" abbreviates "E |- e >> [] evalto v" *)
AppK(k,v; v);           (* v >> k evalto v *)
AppBOp(op, v, v; v);

[Rules]

E-Int: 	EvalTo(env, k, i, v) :- AppK(k, i, v);
E-Bool: EvalTo(env, k, b, v) :- AppK(k, b, v);
E-If: EvalTo(env, k, If(e1, e2, e3), v) :-
       EvalTo(env, BranchK(env,e2,e3,k), e1, v);
E-BinOp: EvalTo(env, k, BinOp(op, e1, e2), v) :-
	  EvalTo(env, EvalRK(env,e2,op,k), e1, v);
E-Var:  EvalTo(env, k, x, v2) :- 
          ` $v1 = lookup $env $k $x` %$env($x) = $v1%, 
          AppK(k, v1, v2);
E-Let:  EvalTo(env, k, Let(x, e1, e2), v) :-
		EvalTo(env, LetBodyK(env,x,e2,k), e1, v);
E-Fun: EvalTo(env, k, Abs(x, e), v) :- AppK(k, Fun(env, x, e), v);
E-App: EvalTo(env, k, App(e1, e2), v) :-
         EvalTo(env, EvalArgK(env,e2,k), e1, v);
E-LetRec: EvalTo(env, k, LetRec(x,y,e1,e2), v) :-
            EvalTo(Bind(env, x, Rec(env,x,y,e1)), k, e2, v);

E-LetCc: EvalTo(env, k, LetCc(x, e), v) :-
            EvalTo(Bind(env,x,Cont(k)), k, e, v);

K-Ret: AppK(RetK, v, v) :- ;
K-EvalR: AppK(EvalRK(env,e,op,k), v1, v2) :- EvalTo(env, AppOpK(v1,op,k), e, v2);
K-Plus: AppK(AppOpK(i1,Plus,k), i2, v) :- AppBOp(Plus, i1, i2, i3), AppK(k, i3, v);
K-Minus: AppK(AppOpK(i1,Minus,k), i2, v) :- AppBOp(Minus, i1, i2, i3), AppK(k, i3, v);
K-Mult: AppK(AppOpK(i1,Mult,k), i2, v) :- AppBOp(Mult, i1, i2, i3), AppK(k, i3, v);
K-Lt: AppK(AppOpK(i1,Lt,k), i2, v) :- AppBOp(Lt, i1, i2, b3), AppK(k, b3, v);

K-IfT: AppK(BranchK(env,e1,e2,k), true, v) :- EvalTo(env, k, e1, v);
K-IfF: AppK(BranchK(env,e1,e2,k), false, v) :- EvalTo(env, k, e2, v);

K-LetBody: AppK(LetBodyK(env,x,e,k), v1, v2) :- EvalTo(Bind(env, x, v1), k, e, v2);
K-EvalArg: AppK(EvalArgK(env, e, k), v1, v) :- EvalTo(env, AppFunK(v1, k), e, v);

K-EvalFun: AppK(AppFunK(Fun(env, x, e), k), v1, v2) :- EvalTo(Bind(env,x,v1), k, e, v2);
K-EvalFunR: AppK(AppFunK(Rec(env, x, y, e), k), v1, v2) :- EvalTo(Bind(Bind(env, x, Rec(env,x,y,e)), y, v1), k, e, v2);
K-EvalFunC: AppK(AppFunK(Cont(k1), k2), v1, v2) :- AppK(k1, v1, v2);


B-Plus: AppBOp(Plus, i1, i2, i3) 	:- `$i3 = $i1 + $i2`;
B-Minus: AppBOp(Minus, i1, i2, i3) 	:- `$i3 = $i1 - $i2`;
B-Mult: AppBOp(Mult, i1, i2, i3) 	:- `$i3 = $i1 * $i2`;
B-Lt: 	AppBOp(Lt, i1, i2, b3) 		:- `$b3 = ($i1 < $i2)`;

[ML]

let rec lookup env k x =
    match env with 
      Empty -> raise (NoApplicableRule (In_EvalTo (env, k, Exp_of_Var x)))
    | Bind(env, x', v') -> if x = x' then v' else lookup env k x
