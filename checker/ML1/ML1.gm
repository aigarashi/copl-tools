(* 
    ML1: À°¿ô (represented by int) + »°Â§±é»» + ¿¿µ¶ÃÍ + If + Èæ³Ó±é»» 
*)

[Syntax]

i in int

b in bool

v in Value ::= i | b

e in Exp ::= i
          | b
          | BinOp(op, e, e)
          | If(e, e, e)

op in Prim ::= Plus | Minus | Mult | Lt

[Judgments]

EvalTo(e; v);
AppBOp(op, v, v; v);

(* AppBOp(Lt, v1, v2, v3) is written "v1 < v2 is v3",
    or "v1 is less than v2" when v3 is true, 
    or "v1 is not less than v2" when v3 is false"
*)

[Rules]

E-Int: 	EvalTo(i, i) :- ;
E-Bool: EvalTo(b, b) :- ;
E-IfT: 	EvalTo(If(e1, e2, e3), v) :- 
		EvalTo(e1, true), EvalTo(e2, v);
E-IfF: 	EvalTo(If(e1, e2, e3), v) :- 
		EvalTo(e1, false), EvalTo(e3, v);
E-Plus: EvalTo(BinOp(Plus, e1, e2), i3) :- 
		EvalTo(e1, i1), EvalTo(e2, i2), AppBOp(Plus, i1, i2, i3);
E-Minus: EvalTo(BinOp(Minus, e1, e2), i3) :- 
		EvalTo(e1, i1), EvalTo(e2, i2), AppBOp(Minus, i1, i2, i3);
E-Mult: EvalTo(BinOp(Mult, e1, e2), i3) :- 
		EvalTo(e1, i1), EvalTo(e2, i2), AppBOp(Mult, i1, i2, i3);
E-Lt: 	EvalTo(BinOp(Lt, e1, e2), b3) :-
		EvalTo(e1, i1), EvalTo(e2, i2), AppBOp(Lt, i1, i2, b3);

B-Plus: AppBOp(Plus, i1, i2, i3) :- `$i3 = $i1 + $i2`;
B-Minus: AppBOp(Minus, i1, i2, i3) 	:- `$i3 = $i1 - $i2`;
B-Mult: AppBOp(Mult, i1, i2, i3) 	:- `$i3 = $i1 * $i2`;
B-Lt: 	AppBOp(Lt, i1, i2, b3) 		:- `$b3 = ($i1 < $i2)`;
