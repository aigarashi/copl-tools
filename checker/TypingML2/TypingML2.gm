(*
  ML1: À°¿ô (represented by int) + »°Â§±é»» + ¿¿µ¶ÃÍ + If + Èæ³Ó±é»» 
  ML2: ML1 + let (´Ä¶­)
  TypingML2: typing for ML2
*)

[BNF]

i in int

b in bool

x,y in string

t in Types ::= TyBool | TyInt

env in Env ::= Empty
            |  Bind(env,x,t)

e in Exp ::= i
          | b
          | x
          | BinOp(p, e, e)
          | If(e, e, e)
          | Let(x, e, e)

p in Prim ::= Plus | Minus | Mult | Lt

[Judgments]

Typing(env, e; t);

[Rules]

T-Int: 	Typing(env, i, TyInt) :- ;
T-Bool: Typing(env, b, TyBool) :- ;
T-If: 	Typing(env, If(e1, e2, e3), t) :- 
		Typing(env, e1, TyBool), Typing(env, e2, t), Typing(env, e3, t);
T-Plus: Typing(env, BinOp(Plus, e1, e2), TyInt) :- 
		Typing(env, e1, TyInt), Typing(env, e2, TyInt);
T-Minus: Typing(env, BinOp(Minus, e1, e2), TyInt) :- 
		Typing(env, e1, TyInt), Typing(env, e2, TyInt);
T-Mult: Typing(env, BinOp(Mult, e1, e2), TyInt) :- 
		Typing(env, e1, TyInt), Typing(env, e2, TyInt);
T-Lt: 	Typing(env, BinOp(Lt, e1, e2), TyBool) :-
		Typing(env, e1, TyInt), Typing(env, e2, TyInt);
T-Var1:  Typing(Bind(env,x,t), x, t) :- ;
T-Var2:  Typing(Bind(env,y,t1), x, t2) :- `$y <> $x` %$y \neq $x%, Typing(env, x, t2);

T-Let:  Typing(env, Let(x, e1, e2), t2) :-
		Typing(env, e1, t1), Typing(Bind(env,x,t1), e2, t2);
