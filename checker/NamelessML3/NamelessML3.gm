(*
  ML1: À°¿ô (represented by int) + »°Â§±é»» + ¿¿µ¶ÃÍ + If + Èæ³Ó±é»» 
  ML2: ML1 + let (´Ä¶­)
  ML3: ML2 + fun (´Ø¿ôÃê¾Ý¡¦Å¬ÍÑ) + let rec (ºÆµ¢´Ø¿ôÄêµÁ)
  NamelessML3: translation from ML3 to de Bruijn ML3
*)

[Syntax]

i in int

b in bool

x,y in Var

n in int

env in VarList ::= Empty
                |  Bind(env,x)

e in Exp ::= i
          | b
          | x
          | BinOp(op, e, e)
          | If(e, e, e)
          | Let(x, e, e)
          | Abs(x, e)
          | App(e, e)
          | LetRec(x, y, e, e)  (* let rec x y = e in e *)

d in DBExp ::= i
            | b
            | Index(n) (* de Bruijn index: #n *)
            | BinOpD(op, d, d)
            | IfD(d, d, d)
            | LetD(d, d)     (* let . = d in d *)
            | AbsD(d)        (* fun . -> d *)
            | AppD(d, d)
            | LetRecD(d, d)  (* let rec . . = d in d *)
 
op in Prim ::= Plus | Minus | Mult | Lt

[Judgments]

TranslateTo(env, e; d);

[Rules]

Tr-Int: TranslateTo(env, i, i) :- ;
Tr-Bool: TranslateTo(env, b, b) :- ;
Tr-If: 	TranslateTo(env, If(e1, e2, e3), IfD(d1, d2, d3)) :- 
		TranslateTo(env, e1, d1), TranslateTo(env, e2, d2), TranslateTo(env, e3, d3);
Tr-Plus: TranslateTo(env, BinOp(Plus, e1, e2), BinOpD(Plus, d1, d2)) :- 
		TranslateTo(env, e1, d1), TranslateTo(env, e2, d2);
Tr-Minus: TranslateTo(env, BinOp(Minus, e1, e2), BinOpD(Minus, d1, d2)) :- 
		TranslateTo(env, e1, d1), TranslateTo(env, e2, d2);
Tr-Times: TranslateTo(env, BinOp(Mult, e1, e2), BinOpD(Mult, d1, d2)) :- 
		TranslateTo(env, e1, d1), TranslateTo(env, e2, d2);
Tr-Lt: TranslateTo(env, BinOp(Lt, e1, e2), BinOpD(Lt, d1, d2)) :- 
		TranslateTo(env, e1, d1), TranslateTo(env, e2, d2);

Tr-Var1:  TranslateTo(Bind(env,x), x, Index(n)) :- `$n = 0`;
Tr-Var2:  TranslateTo(Bind(env,y), x, Index(n2)) :- 
                 `$y <> $x` %$y \neq $x%, 
                 TranslateTo(env, x, Index(n1)),
                 `$n2 = $n1 + 1`;

Tr-Let:  TranslateTo(env, Let(x, e1, e2), LetD(d1, d2)) :-
		TranslateTo(env, e1, d1), TranslateTo(Bind(env,x), e2, d2);
Tr-Fun: TranslateTo(env, Abs(x, e), AbsD(d)) :- TranslateTo(Bind(env,x), e, d);
Tr-App: TranslateTo(env, App(e1, e2), AppD(d1, d2)) :-
         TranslateTo(env, e1, d1),
         TranslateTo(env, e2, d2);

Tr-LetRec: TranslateTo(env, LetRec(x, y, e1, e2), LetRecD(d1, d2)) :-
                TranslateTo(Bind(Bind(env,x), y), e1, d1),
                TranslateTo(Bind(env,x), e2, d2);

