(*
  ML1: 整数 (represented by int) + 三則演算 + 真偽値 + If + 比較演算 
  ML2: ML1 + let (環境)
  ML3: ML2 + fun (関数抽象・適用)
  ML4: ML3 + let rec (再帰関数定義)
  TypingML4: typing for ML4
  PolyML4: polymorphic typing for ML4
  PolyML5: PolyML4 + list
*)

[BNF]

i in int

b in bool

x,y in string

a in string

t in Types ::= TyFVar(a) | TyBVar(i) | TyBool | TyInt | TyFun(t,t) | TyList(t)
  (* if s contains TyBVar(i), it should be a part of type scheme *)

s in TyScheme ::= t | TyScheme(i,t)  (* i is the number of bound variables *)

env in Env ::= Empty
            |  Bind(env,x,s)

e in Exp ::= i
          | b
          | x
          | BinOp(op, e, e)
          | If(e, e, e)
          | Let(x, e, e)
          | Abs(x, e)
          | App(e, e)
          | LetRec(x, y, e, e)  (* let rec x y = e in e *)
	  | Nil
	  | Cons(e,e)
	  | Match(e,e,x,y,e)   (* match e with [] -> e | x::y -> e *)

op in Prim ::= Plus | Minus | Mult | Lt

[Judgments]

Typing(env, e; t);

[Rules]

T-Int: 	Typing(env, i, TyInt) :- ;
T-Bool: Typing(env, b, TyBool) :- ;
T-If: 	Typing(env, If(e1, e2, e3), t) :- 
		Typing(env, e1, TyBool), Typing(env, e2, t), Typing(env, e3, t);
T-Plus: Typing(env, BinOp(Plus, e1, e2), TyInt) :- 
		Typing(env, e1, TyInt), Typing(env, e2, TyInt);
T-Minus: Typing(env, BinOp(Minus, e1, e2), TyInt) :- 
		Typing(env, e1, TyInt), Typing(env, e2, TyInt);
T-Mult: Typing(env, BinOp(Mult, e1, e2), TyInt) :- 
		Typing(env, e1, TyInt), Typing(env, e2, TyInt);
T-Lt: 	Typing(env, BinOp(Lt, e1, e2), TyBool) :-
		Typing(env, e1, TyInt), Typing(env, e2, TyInt);
(*
T-Var1:  Typing(Bind(env,x,s), x, t) :- `inst $s $t` %$s \succeq $t%;
T-Var2:  Typing(Bind(env,y,s), x, t) :- `$y <> $x` %$y \neq $x%, Typing(env, x, t);
*)
T-Var:  Typing(env, x, t) :- ` $s = lookup $env $x` %$env($x) = $s%,
		       	     `inst $s $t` %$s \succeq $t%;

T-Let:  Typing(env, Let(x, e1, e2), t2) :-
		Typing(env, e1, t1), Typing(Bind(env,x,s), e2, t2),
                 `closure $env $t1 $s` 
                 %$s = '$a1 \cdots '$an. $t1 \mbox{ and } \{'$a1,\ldots,'$an\} \cap \mathit{FTV}($env) = \emptyset%;

T-Abs:  Typing(env,Abs(x,e), TyFun(t1,t2)) :- Typing(Bind(env,x,t1), e, t2);
T-App:  Typing(env,App(e1,e2), t2) :- 
                Typing(env, e1, TyFun(t1,t2)), Typing(env, e2, t1);

T-LetRec: Typing(env, LetRec(x, y, e1, e2), t) :-
	        Typing(Bind(Bind(env, x, TyFun(t1, t2)), 
                                      y, t1), 
                        e1, TyFun(t1,t2)), 
                Typing(Bind(env,x,s), e2, t),
                `closure $env (TyFun($t1,$t2)) $s`
                 %$s = '$a1 \cdots '$an. $t1 \rightarrow $t2 \mbox{ and } \{'$a1,\ldots,'$an\} \cap \mathit{FTV}($env) = \emptyset%;

T-Nil: Typing(env, Nil, TyList(t)) :- ;
T-Cons: Typing(env, Cons(e1,e2), TyList(t)) :- Typing(env, e1, t), Typing(env, e2, TyList(t));
T-Match: Typing(env, Match(e1,e2,x,y,e3), t) :- 
	 	 Typing(env, e1, TyList(t')), 
	 	 Typing(env, e2, t),
		 Typing(Bind(Bind(env, x, t'), y, TyList(t')), e3, t);

[ML]

(* free variables in a type (scheme) *)
let rec fv_ty_aux ty res =
  match ty with
      TyFVar(a) -> a :: res
    | TyFun(ty1, ty2) -> fv_ty_aux ty1 (fv_ty_aux ty2 res)
    | TyList ty -> fv_ty_aux ty res
    | _ -> res
let fv_ty ty = fv_ty_aux ty []

let fv_tysc_aux tysc res =
  let TyScheme_of_Types ty | TyScheme(_, ty) = tysc in
    fv_ty_aux ty res
let fv_tysc tysc = fv_tysc_aux tysc []

(* free variables in a type environment *)
let rec fv_tenv env res =
  match env with
      Empty -> res
    | Bind(env, x, s) -> fv_tenv env (fv_tysc_aux s res)
let fv_tenv env = fv_tenv env []

exception Not_match

(* Is ty an instantiation of tysc? *)
let inst tysc ty =  (* ty doesn't contain TyBVar *)
  let rec aux subst tysc ty =
    match tysc, ty with
        TyFVar a, TyFVar a' -> if a = a' then subst else raise Not_match
      | TyBVar i, ty -> 
	  (try 
	      if List.assoc i subst = ty then subst
	      else raise Not_match 
	    with Not_found -> (i, ty)::subst)
      | TyBool, TyBool 
      | TyInt, TyInt -> subst
      | TyList t1, TyList t2 -> aux subst t1 t2
      | TyFun(t11, t12), TyFun(t21, t22) -> aux (aux subst t11 t21) t12 t22 
      | _, TyBVar _ -> err "inst: Implementation error!"
      | _ -> raise Not_match 	
  in
    let TyScheme_of_Types tysc | TyScheme(_, tysc) = tysc in
    try let _ = aux [] tysc ty in true with Not_match -> false

(* Is tys is a generalization of ty under env? *)
let closure env ty tysc =
  let fv = fv_tenv env in
  let rec aux subst tysc ty =
    match tysc, ty with
        TyFVar(a), TyFVar(a') -> if a = a' then subst else raise Not_match
      | TyBVar(i), TyFVar(a) -> 
      	  (try 
	      if List.assoc a subst = i then subst 
	      else raise Not_match
	    with Not_found -> 
	      if List.mem a fv then raise Not_match else (a, i)::subst)
      | TyBool, TyBool -> subst
      | TyInt, TyInt -> subst
      | TyList t1, TyList t2 -> aux subst t1 t2
      | TyFun(t11, t12), TyFun(t21, t22) -> aux (aux subst t11 t21) t12 t22
      | _, TyBVar(i) -> err "closure: Implementation error!"
      | _ -> raise Not_match 
  in 
    let TyScheme_of_Types tysc | TyScheme(_, tysc) = tysc in
    try let _ = aux [] tysc ty in true with Not_match -> false

let rec lookup env x =
    match env with 
      Empty -> raise (NoApplicableRule (In_Typing (env, Exp_of_string x)))
    | Bind(env, x', t) -> if x = x' then t else lookup env x
