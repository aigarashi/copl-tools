(*
  ML1: À°¿ô (represented by int) + »°Â§±é»» + ¿¿µ¶ÃÍ + If + Èæ³Ó±é»» 
  ML2: ML1 + let (´Ä¶­)
  ML3: ML2 + fun (´Ø¿ôÃê¾Ý¡¦Å¬ÍÑ) + let rec (ºÆµ¢´Ø¿ôÄêµÁ)
  ML4: ML3 + list + match
*)

[Syntax]

i in int

b in bool

x,y in Var

v in Value ::= i | b | Fun(env, x, e) | Rec(env, x, y, e) | NilV | ConsV(v,v)

env in Env ::= Empty
            |  Bind(env,x,v)

e in Exp ::= i
          | b
          | x
          | BinOp(op, e, e)
          | If(e, e, e)
          | Let(x, e, e)
          | Abs(x, e)
          | App(e, e)
          | LetRec(x, y, e, e)  (* let rec x y = e in e *)
	  | Nil
	  | Cons(e,e)
	  | Match(e,e,x,y,e)   (* match e with [] -> e | x::y -> e *)

op in Prim ::= Plus | Minus | Mult | Lt

[Judgments]

EvalTo(env, e; v);
AppBOp(op, v, v; v);

[Rules]

E-Int: 	EvalTo(env, i, i) :- ;
E-Bool: EvalTo(env, b, b) :- ;
E-Var:  EvalTo(env, x, v) :- 
          `try $v = lookup $env $x with LookupFailure -> false` 
          `$v = lookup $env $x` 
          %$env($x) = $v%;
E-Plus: EvalTo(env, BinOp(Plus, e1, e2), i3) :- 
		EvalTo(env, e1, i1), EvalTo(env, e2, i2), AppBOp(Plus, i1, i2, i3);
E-Minus: EvalTo(env, BinOp(Minus, e1, e2), i3) :- 
		EvalTo(env, e1, i1), EvalTo(env, e2, i2), AppBOp(Minus, i1, i2, i3);
E-Times: EvalTo(env, BinOp(Mult, e1, e2), i3) :- 
		EvalTo(env, e1, i1), EvalTo(env, e2, i2), AppBOp(Mult, i1, i2, i3);
E-Lt: 	EvalTo(env, BinOp(Lt, e1, e2), b3) :-
		EvalTo(env, e1, i1), EvalTo(env, e2, i2), AppBOp(Lt, i1, i2, b3);
E-IfT: 	EvalTo(env, If(e1, e2, e3), v) :- 
		EvalTo(env, e1, true), EvalTo(env, e2, v);
E-IfF: 	EvalTo(env, If(e1, e2, e3), v) :- 
		EvalTo(env, e1, false), EvalTo(env, e3, v);
(*
E-Var1:  EvalTo(Bind(env,x,v), x, v) :- ;
E-Var2:  EvalTo(Bind(env,y,v1), x, v2) :- `$y <> $x` %$y \neq $x%, EvalTo(env, x, v2);
*)

E-Let:  EvalTo(env, Let(x, e1, e2), v) :-
		EvalTo(env, e1, v1), EvalTo(Bind(env,x,v1), e2, v);
E-Fun: EvalTo(env, Abs(x, e), Fun(env, x, e)) :- ;
E-App: EvalTo(env, App(e1, e2), v) :-
         EvalTo(env, e1, Fun(env2, x, e0)),
         EvalTo(env, e2, v2),
         EvalTo(Bind(env2, x, v2), e0, v);

E-LetRec: EvalTo(env, LetRec(x, y, e1, e2), v) :-
                EvalTo(Bind(env,x,Rec(env,x,y,e1)), e2, v);
E-AppRec: EvalTo(env,App(e1, e2), v) :-
         EvalTo(env, e1, Rec(env2, x, y, e0)),
         EvalTo(env, e2, v2),
         EvalTo(Bind(Bind(env2, x, Rec(env2, x, y, e0)), y, v2), e0, v);
E-Nil: EvalTo(env,Nil,NilV) :- ;
E-Cons: EvalTo(env,Cons(e1,e2),ConsV(v1,v2)) :- EvalTo(env,e1,v1), EvalTo(env,e2,v2);
E-MatchNil: EvalTo(env,Match(e1,e2,x,y,e3),v) :- EvalTo(env,e1,NilV), EvalTo(env,e2,v);
E-MatchCons: EvalTo(env,Match(e1,e2,x,y,e3),v) :- 
	     EvalTo(env,e1,ConsV(v1,v2)), EvalTo(Bind(Bind(env,x,v1), y,v2), e3, v);

B-Plus: AppBOp(Plus, i1, i2, i3) 	:- `$i3 = $i1 + $i2`;
B-Minus: AppBOp(Minus, i1, i2, i3) 	:- `$i3 = $i1 - $i2`;
B-Times: AppBOp(Mult, i1, i2, i3) 	:- `$i3 = $i1 * $i2`;
B-Lt: 	AppBOp(Lt, i1, i2, b3) 		:- `$b3 = ($i1 < $i2)`;

[ML]

exception LookupFailure

let rec lookup env x =
    match env with 
      Empty -> raise LookupFailure
    | Bind(env, x', v') -> if x = x' then v' else lookup env x
