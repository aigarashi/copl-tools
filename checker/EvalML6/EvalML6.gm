(*
  ML1: À°¿ô (represented by int) + »°Â§±é»» + ¿¿µ¶ÃÍ + If + Èæ³Ó±é»» 
  ML2: ML1 + let (´Ä¶­)
  ML3: ML2 + fun (´Ø¿ôÃê¾Ý¡¦Å¬ÍÑ) + let rec (ºÆµ¢´Ø¿ôÄêµÁ)
  ML4: ML3 + list + match
  ML5: ML4 + pattern matching
  ML6: ML3 + arbtrary constructors (arity <= 3)
*)

[Syntax]

i in int

b in bool

c in Cnstr

x,y in Var

v in Value ::= i | b | Fun(env, x, e) | Rec(env, x, y, e) 
            |  CnstrV(c) | CnstrVi(c, v) | CnstrVii(c, v, v) | CnstrViii(c, v, v, v) 

env in Env ::= Empty
            |  Bind(env,x,v)

p in Pat ::= x | WildP | CnstrP(c) | CnstrPi(c,p) | CnstrPii(c, p, p) | CnstrPiii(c, p, p, p)

res in Res ::= env | Fail (* result of matching *)

cl in Clauses ::= SingleC(p,e) | AddC(p,e,cl) (* stands for p -> e | cl *)

e in Exp ::= i
          | b
          | x
          | BinOp(op, e, e)
          | If(e, e, e)
          | Let(x, e, e)
          | Abs(x, e)
          | App(e, e)
          | LetRec(x, y, e, e)  (* let rec x y = e in e *)
          | CnstrE(c)
          | CnstrEi(c,e)
          | CnstrEii(c,e,e)
          | CnstrEiii(c,e,e,e)
          | Match(e,cl)     (* match e with p1 -> e1 | ... | pn -> en *)

op in Prim ::= Plus | Minus | Mult | Lt
  (* renamed due to conflicts with metavars for patterns *)

[Judgments]

Matches(v, p; res); (* The value v matches p according to assignment env *)
EvalTo(env, e; v);
AppBOp(op, v, v; v);

[Rules]

(* pattern matching *)
M-Var: Matches(v, x, Bind(Empty,x,v)) :- ;
M-Cnstr0: Matches(CnstrV(c), CnstrP(c), Empty) :- ;
M-Cnstr1: Matches(CnstrVi(c, v), CnstrPi(c, p), env) :- Matches(v, p, env);
M-Cnstr2: Matches(CnstrVii(c, v1, v2), CnstrPii(c, p1, p2), env) :-
           Matches(v1, p1, env1), Matches(v2, p2, env2),
            (* `disjoint $env1 $env2` %dom($env1)\cap dom($env2) = \emptyset%,*)
            `$env = uplus $env1 $env2` %$env = $env1 \uplus $env2%;
M-Cnstr3: Matches(CnstrViii(c, v1, v2, v3), CnstrPiii(c, p1, p2, p3), env) :-
           Matches(v1, p1, env1), Matches(v2, p2, env2), Matches(v3, p3, env3),
            (* `disjoint $env1 $env2` %dom($env1)\cap dom($env2) = \emptyset%,*)
            `$env = uplus $env1 (uplus $env2 $env3)` %$env = $env1 \uplus $env2 \uplus \env3%;
M-Wild: Matches(v, WildP, Empty) :- ;

NM-Cnstr00H: Matches(CnstrV(c1), CnstrP(c2), Fail) :-
                 `$c1 <> $c2` %$c1 \neq $c2%;
NM-Cnstr01: Matches(CnstrV(c1), CnstrPi(c2,p), Fail) :- ;
NM-Cnstr02: Matches(CnstrV(c1), CnstrPii(c2,p1,p2), Fail) :- ;
NM-Cnstr03: Matches(CnstrV(c1), CnstrPiii(c2,p1,p2,p3), Fail) :- ;

NM-Cnstr10: Matches(CnstrVi(c1,v1), CnstrP(c2), Fail) :- ;
NM-Cnstr11H: Matches(CnstrVi(c1,v), CnstrPi(c2,p), Fail) :- 
                 `$c1 <> $c2` %$c1 \neq $c2%;
NM-Cnstr11A: Matches(CnstrVi(c1,v), CnstrPi(c2,p), Fail) :- Matches(v, p, Fail);
NM-Cnstr12: Matches(CnstrVi(c1,v1), CnstrPii(c2,p1,p2), Fail) :- ;
NM-Cnstr13: Matches(CnstrVi(c1,v1), CnstrPiii(c2,p1,p2,p3), Fail) :- ;

NM-Cnstr20: Matches(CnstrVii(c1,v1,v2), CnstrP(c2), Fail) :- ;
NM-Cnstr21: Matches(CnstrVii(c1,v1,v2), CnstrPi(c2,p1), Fail) :- ;
NM-Cnstr22H: Matches(CnstrVii(c1,v1,v2), CnstrPii(c2,p1,p2), Fail) :- 
                 `$c1 <> $c2` %$c1 \neq $c2%;
NM-Cnstr22L: Matches(CnstrVii(c1,v1,v2), CnstrPii(c2,p1,p2), Fail) :- 
                 Matches(v1, p1, Fail);
NM-Cnstr22R: Matches(CnstrVii(c1,v1,v2), CnstrPii(c2,p1,p2), Fail) :- 
                 Matches(v2, p2, Fail);
NM-Cnstr23: Matches(CnstrVii(c1,v1,v2), CnstrPiii(c2,p1,p2,p3), Fail) :- ;

NM-Cnstr30: Matches(CnstrViii(c1,v1,v2,v3), CnstrP(c2), Fail) :- ;
NM-Cnstr31: Matches(CnstrViii(c1,v1,v2,v3), CnstrPi(c2,p1), Fail) :- ;
NM-Cnstr32: Matches(CnstrViii(c1,v1,v2,v3), CnstrPii(c2,p1,p2), Fail) :- ;
NM-Cnstr33H: Matches(CnstrViii(c1,v1,v2,v3), CnstrPiii(c2,p1,p2,p3), Fail) :- 
                 `$c1 <> $c2` %$c1 \neq $c2%;
NM-Cnstr33L: Matches(CnstrViii(c1,v1,v2,v3), CnstrPiii(c2,p1,p2,p3), Fail) :- 
                 Matches(v1, p1, Fail);
NM-Cnstr33M: Matches(CnstrViii(c1,v1,v2,v3), CnstrPiii(c2,p1,p2,p3), Fail) :- 
                 Matches(v2, p2, Fail);
NM-Cnstr33R: Matches(CnstrViii(c1,v1,v2,v3), CnstrPiii(c2,p1,p2,p3), Fail) :- 
                 Matches(v3, p3, Fail);


E-Int: 	EvalTo(env, i, i) :- ;
E-Bool: EvalTo(env, b, b) :- ;
E-IfT: 	EvalTo(env, If(e1, e2, e3), v) :- 
		EvalTo(env, e1, true), EvalTo(env, e2, v);
E-IfF: 	EvalTo(env, If(e1, e2, e3), v) :- 
		EvalTo(env, e1, false), EvalTo(env, e3, v);
E-Plus: EvalTo(env, BinOp(Plus, e1, e2), i3) :- 
		EvalTo(env, e1, i1), EvalTo(env, e2, i2), AppBOp(Plus, i1, i2, i3);
E-Minus: EvalTo(env, BinOp(Minus, e1, e2), i3) :- 
		EvalTo(env, e1, i1), EvalTo(env, e2, i2), AppBOp(Minus, i1, i2, i3);
E-Times: EvalTo(env, BinOp(Mult, e1, e2), i3) :- 
		EvalTo(env, e1, i1), EvalTo(env, e2, i2), AppBOp(Mult, i1, i2, i3);
E-Lt: 	EvalTo(env, BinOp(Lt, e1, e2), b3) :-
		EvalTo(env, e1, i1), EvalTo(env, e2, i2), AppBOp(Lt, i1, i2, b3);
E-Var:  EvalTo(env, x, v) :- 
          `try $v = lookup $env $x with LookupFailure -> false`
          `$v = lookup $env $x`
          %$env($x) = $v%;
E-Let:  EvalTo(env, Let(x, e1, e2), v) :-
		EvalTo(env, e1, v1), EvalTo(Bind(env,x,v1), e2, v);
E-Fun: EvalTo(env, Abs(x, e), Fun(env, x, e)) :- ;
E-App: EvalTo(env, App(e1, e2), v) :-
         EvalTo(env, e1, Fun(env2, x, e0)),
         EvalTo(env, e2, v2),
         EvalTo(Bind(env2, x, v2), e0, v);

E-LetRec: EvalTo(env, LetRec(x, y, e1, e2), v) :-
                EvalTo(Bind(env,x,Rec(env,x,y,e1)), e2, v);
E-AppRec: EvalTo(env,App(e1, e2), v) :-
         EvalTo(env, e1, Rec(env2, x, y, e0)),
         EvalTo(env, e2, v2),
         EvalTo(Bind(Bind(env2, x, Rec(env2, x, y, e0)), y, v2), e0, v);
E-Cnstr0: EvalTo(env,CnstrE(c),CnstrV(c)) :- ;
E-Cnstr1: EvalTo(env,CnstrEi(c,e),CnstrVi(c,v)) :- EvalTo(env,e,v);
E-Cnstr2: EvalTo(env,CnstrEii(c,e1,e2),CnstrVii(c,v1,v2)) :- EvalTo(env,e1,v1), EvalTo(env,e2,v2);
E-Cnstr3: EvalTo(env,CnstrEiii(c,e1,e2,e3),CnstrViii(c,v1,v2,v3)) :- EvalTo(env,e1,v1), EvalTo(env,e2,v2), EvalTo(env,e3,v3);
E-MatchM1: EvalTo(env,Match(e0,SingleC(p,e)),v') :- 
	    EvalTo(env,e0,v), Matches(v,p,env1), 
              `$env2 = uplus $env $env1` %$env2 = $env \uplus $env1%,
            EvalTo(env2,e,v');
E-MatchM2: EvalTo(env,Match(e0,AddC(p,e,cl)),v') :- 
	    EvalTo(env,e0,v), Matches(v,p,env1), 
              `$env2 = uplus $env $env1` %$env2 = $env \uplus $env1%,
            EvalTo(env2,e,v');
E-MatchN: EvalTo(env,Match(e0,AddC(p,e,cl)),v') :- 
	    EvalTo(env,e0,v), Matches(v,p,Fail), EvalTo(env,Match(e0,cl),v');
           
B-Plus: AppBOp(Plus, i1, i2, i3) 	:- `$i3 = $i1 + $i2`;
B-Minus: AppBOp(Minus, i1, i2, i3) 	:- `$i3 = $i1 - $i2`;
B-Times: AppBOp(Mult, i1, i2, i3) 	:- `$i3 = $i1 * $i2`;
B-Lt: 	AppBOp(Lt, i1, i2, b3) 		:- `$b3 = ($i1 < $i2)`;

[ML]

exception LookupFailure

(*
let rec in_dom x = function
     Empty -> false
   | Bind(env, y, _) -> x = y || in_dom x env

let rec disjoint env1 env2 =
  match env1 with
     Empty -> true
   | Bind(env1, x, _) -> not (in_dom x env2) && disjoint env1 env2
*)

let rec uplus env1 env2 = 
    (* disjointness of the two domains is guaranteed by parsing *)
  match env2 with
     Empty -> env1
   | Bind(env2, x, v) -> Bind(uplus env1 env2, x, v)

let rec lookup env x =
    match env with 
      Empty -> raise LookupFailure
    | Bind(env, x', v') -> if x = x' then v' else lookup env x
