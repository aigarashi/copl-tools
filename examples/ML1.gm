(* ML1: ¦Ë + À°¿ô (represented by int) + »°Â§±é»» *)

[BNF]

i in int

x in string

(*
env in Env ::= Empty
            |  Bind(x,v,env)
*)

v in Value ::= i (* | Proc(env, x, e) *)

e in Exp ::= i
          |  BinOp(p, e, e)
(*          |  Fun(x, e)
          |  App(e, e)
*)

p in Prim ::= Plus | Minus | Mult

[Judgments]

EvalTo(e, v);
AppBOp(p, v, v, v);

[Rules]

E-Const: EvalTo(i, i) :- ;
E-Plus:  EvalTo(BinOp(Plus, e1, e2), i) :- EvalTo(e1, i1), 
                                   EvalTo(e2, i2), 
				   AppBOp(Plus, i1, i2, i3);
E-Minus:   EvalTo(BinOp(Minus, e1, e2), i) :- EvalTo(e1, i1), 
                                   EvalTo(e2, i2), 
					AppBOp(Minus, i1, i2, i3);
E-Mult:  EvalTo(BinOp(Mult, e1, e2), i) :- EvalTo(e1, i1), 
                                   EvalTo(e2, i2), 
					AppBOp(Mult, i1, i2, i3);

B-Plus:  AppBOp(Plus, i1, i2, i3) :- `$i3 = $i1 + $i2`;
B-Minus: AppBOp(Minus, i1, i2, i3) :- `$i3 = $i1 - $i2`;
B-Mult:  AppBOp(Mult, i1, i2, i3) :- `$i3 = $i1 * $i2`;
