(* ML1: ¦Ë + À°¿ô (represented by int) + »°Â§±é»» *)

[BNF]

i in int

x in string

env in Env ::= Empty
            |  Bind(x,v,env)

v in Value ::= i | Proc(env, x, e)

e in Exp ::= i
          |  BinOp(p, e, e)
          |  Fun(x, e)
          |  App(e, e)

p in Prim ::= Plus | Minus | Mult

[Judgments]

EvalTo(e, v);
AppBinOp(p, e, e, e);

[Rules]

E-Const: EvalTo(i, i) :- ;
E-Plus:  EvalTo(BinOp(Plus, e1, e2), i) :- EvalTo(e1, i1), 
                                   EvalTo(e2, i2), 
                                   `$i = $i1 + $i2`;
E-Sub:   EvalTo(BinOp(Minus, e1, e2), i) :- EvalTo(e1, i1), 
                                   EvalTo(e2, i2), 
                                   `$i = $i1 - $i2`;
E-Mult:  EvalTo(BinOp(Mult, e1, e2), i) :- EvalTo(e1, i1), 
                                   EvalTo(e2, i2), 
                                   `$i = $i1 * $i2`;
